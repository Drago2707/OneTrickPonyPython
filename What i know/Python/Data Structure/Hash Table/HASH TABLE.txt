Data structures are a way of organizing and storing data in a computer program so that it can be accessed and modified efficiently. Different data structures are suited for different types of problems and have different time and space complexities for the operations that can be performed on them.

HASH TABLE:

A hash table, also known as a hash map, is a data structure that implements an associative array abstract data type, a structure that can map keys to values. A hash table uses a hash function to compute an index into an array of buckets or slots, from which the desired value can be found.

In a hash table, the keys are hashed, and the resulting hash values are used as indexes in an array. In this way, keys are mapped to the corresponding values that they are associated with. The main advantage of a hash table is that it provides constant-time average case performance for basic operations such as insertion, deletion, and lookup.

A hash table typically consists of two main components: an array and a hash function. The array is used to store the actual key-value pairs and the hash function is used to map the keys to the indexes of the array.

There are different techniques that can be used to resolve collisions, which occur when two keys are mapped to the same index in the array. One of the most common techniques is called open addressing, where if a collision occurs, the hash table looks for the next available slot or "open address" in the array to store the key-value pair.

Another technique is called chaining, where each element of the array is a linked list and keys that hash to the same index are stored in the same linked list.

class HashTable:
    def __init__(self):
        self.size = 10
        self.keys = [None] * self.size
        self.values = [None] * self.size

    def put(self, key, value):
        index = self.hash_function(key)
        while self.keys[index]:
            if self.keys[index] == key:
                self.values[index] = value
                return
            index = (index + 1) % self.size
        self.keys[index] = key
        self.values[index] = value

    def get(self, key):
        index = self.hash_function(key)
        while self.keys[index]:
            if self.keys[index] == key:
                return self.values[index]
            index = (index + 1) % self.size
        return None

    def hash_function(self, key):
        return key % self.size

ht = HashTable()
ht.put(1, "value1")
ht.put(2, "value2")
ht.put(3, "value3")
print(ht.get(1)) # "value1"


This is a basic hash table implementation using open addressing technique. It's important to note that in practice, hash functions should be carefully chosen and implemented in order to ensure good performance, and the size of the table should be chosen based on the number of elements that will be stored.




