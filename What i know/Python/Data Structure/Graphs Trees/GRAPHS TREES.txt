Data structures are a way of organizing and storing data in a computer program so that it can be accessed and modified efficiently. Different data structures are suited for different types of problems and have different time and space complexities for the operations that can be performed on them.

GRAPHS TREES:

A graph is a data structure that consists of a finite set of vertices (also known as nodes) and a set of edges connecting these vertices. The edges can have different weights or values associated with them, and can be directed or undirected. Graphs can be used to model a wide range of problems and systems in computer science, mathematics, and other fields, such as networks, social networks, and transportation systems.

A tree is a special kind of graph that is a connected acyclic graph (i.e., a graph with no cycles). Trees have a specific structure, where one vertex is designated as the root and the remaining vertices are partitioned into disjoint sets called subtrees.

A tree has the following properties:

It is a connected graph with no cycles.
It has a designated vertex called the root.
Each vertex has a parent-child relationship with zero or more vertices.
Each vertex (except the root) has exactly one parent, and the root has no parent.
There are different types of trees, such as binary trees, AVL trees, B-trees and so on. Each tree type has its own characteristics and uses.

A common example of a tree is a file system, where files and directories are represented as vertices, and the edges represent the parent-child relationships between them.

class TreeNode:
    def __init__(self, data):
        self.data = data
        self.children = []

class Tree:
    def __init__(self):
        self.root = None

    def add_node(self, data, parent=None):
        node = TreeNode(data)
        if parent is None:
            self.root = node
        else:
            parent.children.append(node)

    def print_tree(self, node, level=0):
        if node is not None:
            print(" " * level + node.data)
            for child in node.children:
                self.print_tree(child, level + 1)

tree = Tree()
tree.add_node("Root")
tree.add_node("Child 1", tree.root)
tree.add_node("Child 2", tree.root)
tree.add_node("Grandchild 1", tree.root.children[0])
tree.print_tree(tree.root)

This example creates a tree with a root node and two child nodes, and one grandchild node and it allows you to add children to a node. This is a basic implementation, and there could be other ways to improve its performance and functionality, but it should help you understand the concept of trees.



